import { useState, useEffect, useCallback } from "react";
import { FaGithub } from "react-icons/fa";
import {
  Box,
  Button,
  Container,
  Flex,
  Heading,
  Spacer,
  Stack,
  Textarea,
  Tooltip,
  useColorMode,
  ColorModeScript,
  useColorModeValue,
  IconButton,
  Select,
  useToast,
} from "@chakra-ui/react";
import { InfoIcon, CheckIcon, CloseIcon } from "@chakra-ui/icons";
import { ethers } from "ethers";
import { EthereumProvider } from "@walletconnect/ethereum-provider";
import { CHAIN_CONFIG } from "../config";

import { defaultUnlock } from "../constants/params";
import {
  ethersVersion,
  walletconnectModalVersion,
  walletconnectEthereumProviderVersion,
} from "../constants/packages";

export default function Home() {
  const [state, setState] = useState({
    walletConnecting: false,
    selfETHSent: false,
    selfETHSentError: false,
    isSelfETHSentSuccess: false,
    messageSigned: false,
    messageSignedError: false,
    isMessageSignedSuccess: false,
  });

  const updateState = (key, value) => {
    setState((prevState) => ({ ...prevState, [key]: value }));
  };

  const { colorMode, toggleColorMode } = useColorMode();
  const [account, setAccount] = useState("");
  const [unlock, setUnlock] = useState(defaultUnlock);
  const [provider, setProvider] = useState(null);
  const [web3Provider, setWeb3Provider] = useState(null);
  const [availableProviders, setAvailableProviders] = useState([]);
  const [selectedProvider, setSelectedProvider] = useState(null);
  const [currentChain, setCurrentChain] = useState(null);

  const toast = useToast();

  const backgroundColor = useColorModeValue("white", "#181818");
  const textColor = useColorModeValue("black", "white");
  const buttonColorScheme = useColorModeValue("blue", "teal");
  const inputColor = useColorModeValue("gray.200", "gray.800");
  const borderColor = useColorModeValue("gray.300", "gray.600");

  const initializeProvider = useCallback(async () => {
    if (provider) {
      const web3Provider = new ethers.providers.Web3Provider(provider, "any");
      const network = await web3Provider.getNetwork();
      setWeb3Provider(web3Provider);
      setCurrentChain(network.chainId);
      return web3Provider;
    }
    return null;
  }, [provider]);

  useEffect(() => {
    window.addEventListener("eip6963:announceProvider", handleAnnounceProvider);
    window.dispatchEvent(new Event("eip6963:requestProvider"));

    return () => {
      window.removeEventListener(
        "eip6963:announceProvider",
        handleAnnounceProvider
      );
    };
  }, []);

  useEffect(() => {
    if (provider) {
      initializeProvider();
    }
  }, [provider, initializeProvider]);

  const handleAnnounceProvider = (event) => {
    const { info, provider } = event.detail;
    setAvailableProviders((prev) => {
      const exists = prev.some((p) => p.info.uuid === info.uuid);
      if (!exists) {
        return [...prev, { info, provider }];
      }
      return prev;
    });
  };

  const connectWallet = async (selectedProvider) => {
    console.log("Connecting wallet...");
    updateState("walletConnecting", true);
    try {
      await selectedProvider.provider.request({
        method: "eth_requestAccounts",
      });
      const web3Provider = new ethers.providers.Web3Provider(
        selectedProvider.provider
      );
      const signer = web3Provider.getSigner();
      const account = await signer.getAddress();
      const chainId = await web3Provider
        .getNetwork()
        .then((network) => network.chainId);

      console.log("Wallet connected:", account);
      console.log("Current chain ID:", chainId);

      setProvider(selectedProvider.provider);
      setWeb3Provider(web3Provider);
      setAccount(account);
      setSelectedProvider(selectedProvider);
      setCurrentChain(chainId);
      updateState("walletConnecting", false);

      selectedProvider.provider.on("accountsChanged", handleAccountsChanged);
      selectedProvider.provider.on("chainChanged", handleChainChanged);

      toast({
        title: "Wallet Connected",
        description: `Connected to account ${account.substring(
          0,
          6
        )}...${account.substring(38)}`,
        status: "success",
        duration: 3000,
        isClosable: true,
      });
    } catch (e) {
      console.error(e);
      toast({
        title: "Connection Failed",
        description: "Failed to connect wallet. Please try again.",
        status: "error",
        duration: 3000,
        isClosable: true,
      });
      updateState("walletConnecting", false);
    }
  };

  const connectWalletConnect = async () => {
    try {
      const wcProvider = await EthereumProvider.init({
        projectId: "dbe9fe1215dbe847681ac3dc99af6226",
        chains: [94524], // xchain
        showQrModal: true,
      });
  
      await wcProvider.enable();
      const web3Provider = new ethers.providers.Web3Provider(wcProvider);
      const signer = web3Provider.getSigner();
      const account = await signer.getAddress();
  
      setProvider(wcProvider);
      setWeb3Provider(web3Provider);
      setAccount(account);
      setCurrentChain(
        await web3Provider.getNetwork().then((network) => network.chainId)
      );
  
      wcProvider.on("accountsChanged", handleAccountsChanged);
      wcProvider.on("chainChanged", handleChainChanged);
  
      toast({
        title: "WalletConnect Connected",
        description: `Connected to account ${account.substring(
          0,
          6
        )}...${account.substring(38)}`,
        status: "success",
        duration: 3000,
        isClosable: true,
      });
    } catch (error) {
      console.error("WalletConnect initialization failed", error);
      toast({
        title: "Connection Failed",
        description: "Failed to initialize WalletConnect. Please try again.",
        status: "error",
        duration: 3000,
        isClosable: true,
      });
    }
  };
  
  const handleAccountsChanged = (accounts) => {
    try {
      if (accounts.length === 0) {
        disconnectWallet();
      } else {
        setAccount(accounts[0]);
      }
    } catch (error) {
      console.error("Error handling accounts changed:", error);
    }
  };
  
  const handleChainChanged = (chainId) => {
    try {
      setCurrentChain(parseInt(chainId, 16));
      initializeProvider();
    } catch (error) {
      console.error("Error handling chain changed:", error);
    }
  };
  
  const disconnectWallet = () => {
    try {
      if (provider && provider.disconnect) {
        provider.disconnect();
      }
      setProvider(null);
      setWeb3Provider(null);
      setAccount("");
      setSelectedProvider(null);
      setCurrentChain(null);
      toast({
        title: "Wallet Disconnected",
        status: "info",
        duration: 3000,
        isClosable: true,
      });
    } catch (error) {
      console.error("Error disconnecting wallet:", error);
    }
  };
  
  const waitForNetworkChange = async (targetChainId) => {
    return new Promise((resolve, reject) => {
      const checkNetwork = async () => {
        try {
          await provider.request({ method: "eth_chainId" });
          const network = await web3Provider.getNetwork();
          if (network.chainId === targetChainId) {
            resolve();
          } else {
            setTimeout(checkNetwork, 1000);
          }
        } catch (error) {
          console.error("Error checking network:", error);
          reject(error); 
          setTimeout(checkNetwork, 1000);
        }
      };
      checkNetwork();
    });
  };
  
  const switchNetwork = async (chainName) => {
    let chainInfo;
    try {
      chainInfo = CHAIN_CONFIG[chainName];
      if (!chainInfo) {
        throw new Error(`Invalid chain name: ${chainName}`);
      }
    } catch (error) {
      console.error(`Error retrieving chain information: ${error}`);
      return;
    }

    const targetChainId = parseInt(chainInfo.chainId, 16);

    try {
      await provider.request({
        method: "wallet_switchEthereumChain",
        params: [{ chainId: chainInfo.chainId }],
      });
    } catch (switchError) {
      console.error(`Error switching network: ${switchError}`);
      if (switchError.code === 4902) {
        try {
          await provider.request({
            method: "wallet_addEthereumChain",
            params: [
              {
                chainId: chainInfo.chainId,
                chainName: chainInfo.chainName,
                nativeCurrency: chainInfo.nativeCurrency,
                rpcUrls: chainInfo.rpcUrls,
                blockExplorerUrls: chainInfo.blockExplorerUrls,
              },
            ],
          });

          await provider.request({
            method: "wallet_switchEthereumChain",
            params: [{ chainId: chainInfo.chainId }],
          });
        } catch (addError) {
          console.error(`Failed to add ${chainInfo.chainName}: ${addError}`);
          toast({
            title: "Network Addition Failed",
            description: `Failed to add ${chainInfo.chainName}. Please add it manually in your wallet.`,
            status: "error",
            duration: 5000,
            isClosable: true,
          });
          return;
        }
      } else {
        toast({
          title: "Network Switch Failed",
          description: `Failed to switch to ${chainInfo.chainName}. Please switch manually in your wallet.`,
          status: "error",
          duration: 5000,
          isClosable: true,
        });
        return;
      }
    }

    try {
      await waitForNetworkChange(targetChainId);
      await initializeProvider();

      toast({
        title: "Network Switched",
        description: `Switched to ${chainInfo.chainName}`,
        status: "success",
        duration: 3000,
        isClosable: true,
      });
    } catch (networkError) {
      console.error(`Error after switching network: ${networkError}`);
    }
  };

  const signMessage = async () => {
    updateState("messageSigned", true);
    try {
      const signer = web3Provider.getSigner();
      const signature = await signer.signMessage(unlock);
      console.log("Message signed:", signature);
      updateState("isMessageSignedSuccess", true);
      toast({
        title: "Message Signed",
        description: "Message signed successfully",
        status: "success",
        duration: 3000,
        isClosable: true,
      });
    } catch (e) {
      console.error(e);
      updateState("messageSignedError", true);
      toast({
        title: "Signing Failed",
        description: "Failed to sign message",
        status: "error",
        duration: 3000,
        isClosable: true,
      });
    } finally {
      updateState("messageSigned", false);
      setTimeout(() => {
        updateState("isMessageSignedSuccess", false);
        updateState("messageSignedError", false);
      }, 5000);
    }
  };

  const send0ETHSelf = async (chainName) => {
    updateState("selfETHSent", true);
    try {
      const chainInfo = CHAIN_CONFIG[chainName];
      if (!chainInfo) {
        throw new Error(`Invalid chain name: ${chainName}`);
      }

      const targetChainId = parseInt(chainInfo.chainId, 16);
      if (currentChain !== targetChainId) {
        await switchNetwork(chainName);
      }

      const web3Provider = await initializeProvider();
      const signer = web3Provider.getSigner();
      const address = await signer.getAddress();
      const nonce = await web3Provider.getTransactionCount(address, "latest");
      const gasLimit = await web3Provider.estimateGas({
        to: address,
        value: ethers.utils.parseEther("0"),
      });

      let transaction = {
        to: address,
        value: ethers.utils.parseEther("0"),
        nonce: nonce,
        gasLimit: gasLimit.mul(120).div(100),
        chainId: targetChainId,
      };

      if (chainName === "optimism" || chainName === "base") {
        const gasPrice = await web3Provider.getGasPrice();
        transaction.gasPrice = gasPrice;
      } else {
        const feeData = await web3Provider.getFeeData();
        transaction.maxFeePerGas = feeData.maxFeePerGas;
        transaction.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
        transaction.type = 2;
      }

      console.log("Sending transaction:", transaction);

      const tx = await signer.sendTransaction(transaction);
      console.log(`Transaction sent on ${chainName}:`, tx.hash);

      const receipt = await tx.wait();
      console.log(
        `Transaction confirmed on ${chainName}:`,
        receipt.transactionHash
      );

      updateState("isSelfETHSentSuccess", true);
      toast({
        title: "Transaction Sent",
        description: `0 ETH sent to self on ${chainName}. Hash: ${tx.hash}`,
        status: "success",
        duration: 5000,
        isClosable: true,
      });
    } catch (e) {
      console.error(`Error sending transaction on ${chainName}:`, e);
      updateState("selfETHSentError", true);
      toast({
        title: "Transaction Failed",
        description: `Failed to send 0 ETH to self on ${chainName}: ${e.message}`,
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    } finally {
      updateState("selfETHSent", false);
      setTimeout(() => {
        updateState("isSelfETHSentSuccess", false);
        updateState("selfETHSentError", false);
      }, 5000);
    }
  };

  function clearLocalStorage() {
    console.log("Clearing local storage...");
    localStorage.clear();
    window.location.reload();
  }

  return (
    <Container maxW="container.md">
      <ColorModeScript initialColorMode="dark" />
      <Flex justifyContent="space-between" alignItems="center" mb={1}>
        <Heading my={4} size="md">
          Test wallet stuff
          <Tooltip label="View Source">
            <IconButton
              as="a"
              href="https://github.com/nardis556/wcv2test"
              aria-label="GitHub"
              icon={<FaGithub />}
            />
          </Tooltip>
        </Heading>
        <Button onClick={toggleColorMode} width={100}>
          {colorMode === "light" ? "Dark" : "Light"}
        </Button>
      </Flex>
      <Box
        p={5}
        shadow="md"
        borderWidth="1.5px"
        borderRadius="md"
        w="100%"
        bg={backgroundColor}
        color={textColor}
        borderColor={borderColor}
      >
        <Flex>
          <Heading size="md">
            {account
              ? `${account.substring(0, 5) + "~" + account.slice(-4)}`
              : "No wallet connected"}
          </Heading>
          <Spacer />
          {provider ? (
            <Button colorScheme="red" onClick={disconnectWallet}>
              Disconnect
            </Button>
          ) : (
            <>
              <Select
                placeholder="EIP-6963 provider"
                onChange={(e) => {
                  const selected = availableProviders.find(
                    (p) => `${p.info.uuid}-${p.info.name}` === e.target.value
                  );
                  if (selected) {
                    connectWallet(selected);
                  }
                }}
                width="200px"
                mr={2}
              >
                {availableProviders.map((p, index) => (
                  <option
                    key={`${p.info.uuid}-${p.info.name}-${index}`}
                    value={`${p.info.uuid}-${p.info.name}`}
                  >
                    {p.info.name}
                  </option>
                ))}
              </Select>
              <Button
                colorScheme={buttonColorScheme}
                onClick={connectWalletConnect}
                isLoading={state.walletConnecting}
              >
                WalletConnect
              </Button>
            </>
          )}
        </Flex>
        <Stack spacing={4} mt={5}>
          <Box>
            <Flex alignItems="center">
              <Textarea
                placeholder="Sign message"
                value={unlock}
                onChange={(e) => setUnlock(e.target.value)}
                isDisabled={!provider}
                bg={inputColor}
                color={textColor}
                height={50}
                fontSize={11}
              />
            </Flex>
            <Button
              colorScheme={buttonColorScheme}
              onClick={signMessage}
              mt={2}
              isDisabled={!provider}
              isLoading={state.messageSigned}
              width={260}
            >
              Sign Message
              <Tooltip label="Sign Message" aria-label="A tooltip">
                <InfoIcon color="yellow.500" ml={2} />
              </Tooltip>
              {state.isMessageSignedSuccess && <CheckIcon ml={2} />}
              {state.messageSignedError && <CloseIcon ml={2} />}
            </Button>
          </Box>
          <Heading size="sm" mt={4}>
            Switch Chain
          </Heading>
          <Stack direction="row" spacing={4} flexWrap="wrap">
            {Object.keys(CHAIN_CONFIG).map((chain) => (
              <Button
                key={chain}
                colorScheme={buttonColorScheme}
                onClick={() => switchNetwork(chain)}
                isDisabled={!provider}
                mb={2}
              >
                {CHAIN_CONFIG[chain].chainName}
              </Button>
            ))}
          </Stack>
          <Heading size="sm" mt={4}>
            Send 0 ETH to Self
          </Heading>
          <Stack direction="row" spacing={4} flexWrap="wrap">
            {Object.keys(CHAIN_CONFIG).map((chain) => (
              <Button
                key={chain}
                colorScheme={buttonColorScheme}
                onClick={() => send0ETHSelf(chain)}
                isDisabled={!provider}
                isLoading={state.selfETHSent}
                mb={2}
              >
                {CHAIN_CONFIG[chain].chainName}
                {state.isSelfETHSentSuccess && <CheckIcon ml={2} />}
                {state.selfETHSentError && <CloseIcon ml={2} />}
              </Button>
            ))}
          </Stack>
          <Button colorScheme="red" onClick={clearLocalStorage} mt={4}>
            Clear Local Storage And Refresh
          </Button>
        </Stack>
      </Box>
      <Container maxW="container.md" fontSize={11} alignContent={"left"} mt={4}>
        <p>
          @walletconnect/ethereum-provider{walletconnectEthereumProviderVersion}
        </p>
        <p>@walletconnect/modal{walletconnectModalVersion}</p>
        <p>@ethers{ethersVersion}</p>
      </Container>
    </Container>
  );
}
